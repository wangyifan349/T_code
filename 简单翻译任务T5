import torch
from transformers import T5Tokenizer, T5ForConditionalGeneration, Seq2SeqTrainingArguments, Seq2SeqTrainer
from datasets import load_dataset

# 加载WMT16英德翻译数据集
dataset = load_dataset('wmt16', 'de-en')

# 加载预训练模型和分词器
model_name = 't5-small'
tokenizer = T5Tokenizer.from_pretrained(model_name)
model = T5ForConditionalGeneration.from_pretrained(model_name)

# 预处理数据
def preprocess_function(examples):
    inputs = ["translate English to German: " + ex['en'] for ex in examples['translation']]
    targets = [ex['de'] for ex in examples['translation']]
    model_inputs = tokenizer(inputs, max_length=128, truncation=True, padding="max_length")
    labels = tokenizer(targets, max_length=128, truncation=True, padding="max_length")
    model_inputs['labels'] = labels['input_ids']
    return model_inputs

# 使用map方法应用预处理函数
tokenized_datasets = dataset.map(preprocess_function, batched=True)

# 设置训练参数
training_args = Seq2SeqTrainingArguments(
    output_dir='./results',
    evaluation_strategy='epoch',
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=3,
    predict_with_generate=True
)

# 定义Trainer
trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_datasets['train'],
    eval_dataset=tokenized_datasets['validation'],
    tokenizer=tokenizer
)

# 开始训练
trainer.train()

# 评估模型
results = trainer.evaluate()
print(results)

# 保存模型和分词器
model.save_pretrained('./saved_model')
tokenizer.save_pretrained('./saved_model')

# 加载模型和分词器
model = T5ForConditionalGeneration.from_pretrained('./saved_model')
tokenizer = T5Tokenizer.from_pretrained('./saved_model')

# 使用加载的模型进行翻译
sample_text = ["translate English to German: Hello, how are you?"]
inputs = tokenizer(sample_text, return_tensors="pt", padding=True, truncation=True, max_length=128)
translated = model.generate(**inputs)
translated_text = [tokenizer.decode(t, skip_special_tokens=True) for t in translated]
print(translated_text)
